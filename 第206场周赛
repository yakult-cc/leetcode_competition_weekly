[TOC]

### 1. 第206场周赛

#### [1582. 二进制矩阵中的特殊位置](https://leetcode-cn.com/problems/special-positions-in-a-binary-matrix/)

难度简单4

给你一个大小为 `rows x cols` 的矩阵 `mat`，其中 `mat[i][j]` 是 `0` 或 `1`，请返回 **矩阵 \*`mat`\* 中特殊位置的数目** 。

**特殊位置** 定义：如果 `mat[i][j] == 1` 并且第 `i` 行和第 `j` 列中的所有其他元素均为 `0`（行和列的下标均 **从 0 开始** ），则位置 `(i, j)` 被称为特殊位置。

 

**示例 1：**

```
输入：mat = [[1,0,0],
            [0,0,1],
            [1,0,0]]
输出：1
解释：(1,2) 是一个特殊位置，因为 mat[1][2] == 1 且所处的行和列上所有其他元素都是 0
```

**示例 2：**

```
输入：mat = [[1,0,0],
            [0,1,0],
            [0,0,1]]
输出：3
解释：(0,0), (1,1) 和 (2,2) 都是特殊位置
```

**示例 3：**

```
输入：mat = [[0,0,0,1],
            [1,0,0,0],
            [0,1,1,0],
            [0,0,0,0]]
输出：2
```

**示例 4：**

```
输入：mat = [[0,0,0,0,0],
            [1,0,0,0,0],
            [0,1,0,0,0],
            [0,0,1,0,0],
            [0,0,0,1,1]]
输出：3 
```

**提示：**

- `rows == mat.length`
- `cols == mat[i].length`
- `1 <= rows, cols <= 100`
- `mat[i][j]` 是 `0` 或 `1`

##### 思路：

1. 暴力算法。
2. 需要一个行数组，一个列数组，分别记录所有对应行列的1的总数。
3. 条件为当mat\[ x ][ y ] == 1 且当前行列都为1， 说明该行该列除了一个1以外都是0。

##### 代码：

```java
class Solution {
    public int numSpecial(int[][] mat) {
        int ans = 0;
        int row[] = new int[mat.length];
        int col[] = new int[mat[0].length];
        for(int i = 0; i < mat.length; ++i){
            for(int j = 0 ; j < mat[0].length; ++j){
                if(mat[i][j] == 1){
                    row[i]++;
                    col[j]++;
                    
                }
            }
        }    
        for(int i = 0; i < mat.length; ++i){
            for(int j = 0 ; j < mat[0].length; ++j){
                if(mat[i][j] == 1 && col[j] == 1 && row[i] == 1) ans++;
            }            
        }
        return ans;
    }
}
```

​	ending! fighting!

#### [1583. 统计不开心的朋友](https://leetcode-cn.com/problems/count-unhappy-friends/)

难度中等11

给你一份 `n` 位朋友的亲近程度列表，其中 `n` 总是 **偶数** 。

对每位朋友 `i`，`preferences[i]` 包含一份 **按亲近程度从高****到低排列** 的朋友列表。换句话说，排在列表前面的朋友与 `i` 的亲近程度比排在列表后面的朋友更高。每个列表中的朋友均以 `0` 到 `n-1` 之间的整数表示。

所有的朋友被分成几对，配对情况以列表 `pairs` 给出，其中 `pairs[i] = [xi, yi]` 表示 `xi` 与 `yi` 配对，且 `yi` 与 `xi` 配对。

但是，这样的配对情况可能会是其中部分朋友感到不开心。在 `x` 与 `y` 配对且 `u` 与 `v` 配对的情况下，如果同时满足下述两个条件，`x` 就会不开心：

- `x` 与 `u` 的亲近程度胜过 `x` 与 `y`，且
- `u` 与 `x` 的亲近程度胜过 `u` 与 `v`

返回 **不开心的朋友的数目** 。

 

**示例 1：**

```
输入：n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]
输出：2
解释：
朋友 1 不开心，因为：
- 1 与 0 配对，但 1 与 3 的亲近程度比 1 与 0 高，且
- 3 与 1 的亲近程度比 3 与 2 高。
朋友 3 不开心，因为：
- 3 与 2 配对，但 3 与 1 的亲近程度比 3 与 2 高，且
- 1 与 3 的亲近程度比 1 与 0 高。
朋友 0 和 2 都是开心的。
```

**示例 2：**

```
输入：n = 2, preferences = [[1], [0]], pairs = [[1, 0]]
输出：0
解释：朋友 0 和 1 都开心。
```

**示例 3：**

```
输入：n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]
输出：4
```

 

**提示：**

- `2 <= n <= 500`
- `n` 是偶数
- `preferences.length == n`
- `preferences[i].length == n - 1`
- `0 <= preferences[i][j] <= n - 1`
- `preferences[i]` 不包含 `i`
- `preferences[i]` 中的所有值都是独一无二的
- `pairs.length == n/2`
- `pairs[i].length == 2`
- `xi != yi`
- `0 <= xi, yi <= n - 1`
- 每位朋友都 **恰好** 被包含在一对中

#####  标签：暴力，不过题意实在难懂。

##### 思路：

1. 判断一个小朋友开心不开心，假设（x，y）（u，v）互相配对
   - 找出x与y的亲密程度 preferences\[x][i]=y 中的i即为亲密程度，记为close1;
   - 找出x与u的亲密程度 preferences\[x][i]=u 中的i即为亲密程度，记为close2;
   - close2 < close1 : 即为 x 与 u 的亲近程度胜过 x 与 y
   - 同理，找出u与v的亲密程度 preferences\[u][i]=v 中的i即为亲密程度，记为close3;
   - 找出u与x的亲密程度 preferences\[u][i]=x 中的i即为亲密程度，记为close4;
   - close3 < close4 :  即为 u 与 x 的亲近程度胜过 u 与 v，两个同时满足，x就是我们要找的不开心小朋友。
2. 每次我们都需要两对就行一个判断，而比如（x, y）(u, v) 两对我们只对x进行了判断，所以对两对来说，它们有八种配对方式：
   - (x,y),(u,v)与(x,y),(v,u)：判断x
   - (y,x),(u,v)与(y,x),(v,u)：判断y
   - (u,v),(x,y)与(u,v),(y,x)：判断u
   - (v,u),(x,y)与(v,u),(y,x)：判断v
   - 8种配对方式可以看做是4组，每一组判断第一是否为不开心朋友
3. paris的长度是 n/2 ，选取两两组合，当组合数>=3时，比如：(1,2),(3,4),(5,6)
   - (1,2),(3,4)
   - (1,2),(5,6)
   - (3,4),(5,6)
   - 这其中以1开头就出现在组合中两次，假如1是不开心小朋友，那么1号不开心小朋友会多次计算，用HashSet剔除重复的小朋友

代码：

```java
class Solution {
    public int unhappyFriends(int n, int[][] preferences, int[][] pairs) {
        // 用一个HashSet存储不开心的朋友，分组多的时候，会出现重复，剔除重复
        Set<Integer> set = new HashSet<>();
        //两个循环，确定所有的组合
        for(int i=0; i<n/2; i++){
            for(int j=i+1; j<n/2; j++){
                if(isUnhappy(n,preferences, pairs[i][0], pairs[i][1], pairs[j][0], pairs[j][1]) || isUnhappy(n,preferences, pairs[i][0], pairs[i][1], pairs[j][1], pairs[j][0])){
                    set.add(pairs[i][0]);
                }
                if(isUnhappy(n,preferences, pairs[i][1], pairs[i][0], pairs[j][0], pairs[j][1]) || isUnhappy(n,preferences, pairs[i][1], pairs[i][0], pairs[j][1], pairs[j][0])){
                    set.add(pairs[i][1]);
                }
                if(isUnhappy(n,preferences, pairs[j][0], pairs[j][1], pairs[i][0], pairs[i][1]) || isUnhappy(n,preferences, pairs[j][0], pairs[j][1], pairs[i][1], pairs[i][0])){
                    set.add(pairs[j][0]);
                }
                if(isUnhappy(n,preferences, pairs[j][1], pairs[j][0], pairs[i][0], pairs[i][1]) || isUnhappy(n,preferences, pairs[j][1], pairs[j][0], pairs[i][1], pairs[i][0])){
                    set.add(pairs[j][1]);
                }
            }
        }
        return set.size();
    }
    // 判断X是否开心
    public boolean isUnhappy(int n, int[][] preferences, int x, int y, int u, int v){
        int close1 = 0, close2 = 0;
        for(int i=0; i<n-1; i++){
            if(preferences[x][i] == y){
                close1 = i;
            }
            if(preferences[x][i] == u){
                close2 = i;
            }
        }
        int close3 = 0, close4 = 0;
        for(int i=0; i<n-1; i++){
            if(preferences[u][i] == v){
                close3 = i;
            }
            if(preferences[u][i] == x){
                close4 = i;
            }
        }
        return (close2 < close1 && close4 < close3);
    }
}
```

#### [1584. 连接所有点的最小费用](https://leetcode-cn.com/problems/min-cost-to-connect-all-points/)

难度中等23

给你一个`points` 数组，表示 2D 平面上的一些点，其中 `points[i] = [xi, yi]` 。

连接点 `[xi, yi]` 和点 `[xj, yj]` 的费用为它们之间的 **曼哈顿距离** ：`|xi - xj| + |yi - yj|` ，其中 `|val|` 表示 `val` 的绝对值。

请你返回将所有点连接的最小总费用。只有任意两点之间 **有且仅有** 一条简单路径时，才认为所有点都已连接。

 

**示例 1：**

![img](https://assets.leetcode.com/uploads/2020/08/26/d.png)

```
输入：points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
输出：20
解释：

我们可以按照上图所示连接所有点得到最小总费用，总费用为 20 。
注意到任意两个点之间只有唯一一条路径互相到达。
```

**示例 2：**

```
输入：points = [[3,12],[-2,5],[-4,1]]
输出：18
```

**示例 3：**

```
输入：points = [[0,0],[1,1],[1,0],[-1,1]]
输出：4
```

**示例 4：**

```
输入：points = [[-1000000,-1000000],[1000000,1000000]]
输出：4000000
```

**示例 5：**

```
输入：points = [[0,0]]
输出：0
```

 

**提示：**

- `1 <= points.length <= 1000`
- `-106 <= xi, yi <= 106`
- 所有点 `(xi, yi)` 两两不同。

##### 标签：并查集  

​					最小生成树\[prim算法， kruskal算法]

##### 思路：

1. Prim算法：它的每一步都会为一颗生长中的树添加一条边。

   一开始这棵树只有一个顶点，直到最后它被添加了V - 1条边（V是顶点总数）。每次添加的边有什么条件呢？1.它要是连接到了树中的顶点，但是不在树中的顶点，而且必须是权重最小的横切边加入树中。

   这句话有些绕口，如果我以一个tree集合表示所有已经加入树的顶点和边，那么这个下一个要被加进树的边，一定要不在树中，否则就成环了；并且要与树中的顶点相连接，不然就成为了两颗独立树了。满足这两个条件，其实就是横切边了。权重最小的就很好理解了，毕竟要是最小生成树。

2. 如何实现？

   1. 每次操作，我们把当前树中的点的所有横切边添加到优先队列中。
      - 优先队列按照每条边的权重排序，所以我们使用一个函数去计算权重；
      - 源点的所有横切边，对除该点外的所有点的连线，计算曼哈顿距离。
   2. 每次从优先队列中删除一条边，对该条边进行判断：

      - 是否已经属于生成树中？
      - 将该边的另一个顶点的横切边加入优先队列。

   ##### 代码：

   ```java
   class Solution {
       PriorityQueue<Edge> pq;
       private boolean[] marked;
       private int count;
       private int sum;
       public int minCostConnectPoints(int[][] points) {
           pq = new PriorityQueue<>((a,b)-> a.length - b.length);
           int pointsLen = points.length;
           marked = new boolean[pointsLen];
           addEdges(points, 0);
           count = 1;
           while(!pq.isEmpty() && count <= pointsLen - 1){
               Edge minEdge = pq.poll();
               if(!marked[minEdge.v]){
                   marked[minEdge.u] = true;
                   sum += minEdge.length;
                   addEdges(points, minEdge.v);
               }       
           }
           return sum;
       }
       public void addEdges(int[][] points, int index){
           int i = 0;
           while(i < points.length){
               if(!marked[i]){
                   int distance = Math.abs(points[i][0] - points[index][0]) + 
                                   Math.abs(points[i][1] - points[index][1]);
                   pq.add(new Edge(distance,index, i));
               }  
               i++;
           }        
       }
   }
   class Edge{
       int length;
       int u;
       int v;
       public Edge(int length, int u, int v){
           this.length = length;
           this.u = u;
           this.v = v;
       }
   }
   ```

   

   ##### 思路2 ：

   1.  kruskal算法。
   2.  主要思想，按照边的权重顺序（从小到大）处理他们，将边加入到最小生成树中，加入的边不会与已经加入的边构成环，直到树中含有V - 1条边为止。这些边逐渐由一篇森林合成一棵树，也就是图的最小生成树。
   3.  数据结构： 优先队列将边按照权重排序。
       并查集（union-find）来识别会形成环的边。
       一条队列保存最小生成树的所有边。

   #####  代码：

   ```java
   /***
   Kruskal算法思想
   用最小堆存储未使用的边的权重
   取出堆里的边查看与已使用的边是否构成环，没有环则加入并查集，并将长度统计进结果变量
   ***/
   class Solution {
       public int minCostConnectPoints(int[][] points) {
         PriorityQueue<Edge> heap=new PriorityQueue<Edge>((a,b)
                   ->a.len-b.len);   //小顶堆
           int plen=points.length;
           for(int i=0;i<plen-1;i++)
           {
               for(int j=i+1;j<plen;j++)
               {
                   int len=Math.abs(points[i][0]-points[j][0])
                           +Math.abs(points[i][1]-points[j][1]);
                   heap.offer(new Edge(len,i,j));
               }
           }
           DisJointSet djset=new DisJointSet(plen);  //并查集
           int end=plen-1; //最小生成树的边的个数为 顶点数-1
           int ans=0;
           while(!heap.isEmpty())
           {
               Edge edg=heap.poll();
               if(djset.find_root(edg.u)!=djset.find_root(edg.v))
               {
                   ans+=edg.len;
                   djset.union(edg.u,edg.v);
                   --end;
                   if(end==0)
                   {
                       break;
                   }
               }
           }
           return ans;
       }
   }
   /***
   边
   ***/
   class Edge
   {
       int len;
       int u;
       int v;
       public Edge(int len,int u,int v)
       {
          this.len=len;
          this.u=u;
          this.v=v;
       }
   }
   /***
   并查集
   ***/
   class DisJointSet {
       int[] parent; 
       public DisJointSet(int n) {
           parent = new int[n];
           for (int i = 0; i < n; ++i)
               parent[i] = i;
       }
   
       public int find_root(int x) {
           while (x != parent[x]) {
               parent[x] = parent[parent[x]];
               x = parent[x];
           }
           return x;
       }
       public void union(int x, int y) {
           parent[find_root(x)] = find_root(y);
       }
   }
   ```

   

   #### [1585. 检查字符串是否可以通过排序子字符串得到另一个字符串](https://leetcode-cn.com/problems/check-if-string-is-transformable-with-substring-sort-operations/)

   给你两个字符串 `s` 和 `t` ，请你通过若干次以下操作将字符串 `s` 转化成字符串 `t` ：

   - 选择 `s` 中一个 **非空** 子字符串并将它包含的字符就地 **升序** 排序。

   比方说，对下划线所示的子字符串进行操作可以由 `"1**4234**"` 得到 `"1**2344**"` 。

   如果可以将字符串 `s` 变成 `t` ，返回 `true` 。否则，返回 `false` 。

   一个 **子字符串** 定义为一个字符串中连续的若干字符。

    

   ##### **示例 1：**

   ```
   输入：s = "84532", t = "34852"
   输出：true
   解释：你可以按以下操作将 s 转变为 t ：
   "84532" （从下标 2 到下标 3）-> "84352"
   "84352" （从下标 0 到下标 2） -> "34852"
   ```

   **示例 2：**

   ```
   输入：s = "34521", t = "23415"
   输出：true
   解释：你可以按以下操作将 s 转变为 t ：
   "34521" -> "23451"
   "23451" -> "23415"
   ```

   **示例 3：**

   ```
   输入：s = "12345", t = "12435"
   输出：false
   ```

   **示例 4：**

   ```
   输入：s = "1", t = "2"
   输出：false
   ```

    

   **提示：**

   - `s.length == t.length`
   - `1 <= s.length <= 105`
   - `s` 和 `t` 都只包含数字字符，即 `'0'` 到 `'9'` 。

   ##### 思路：

   1. 判断 s 是否能够通过子字符串进行排序后得到 t，正确的变换方式太多，所以我们直接确定什么情况会没办法变换。
   2. s = "84532", t = "34852"
      如果想把 s 变成 t，那么第一步我们需要把 s 的第一个字母变成 3，其实就可以从第一个字母遍历到是 3 的地方，如果这个过程中遇到比 3 小的字母，那么一定是不可能变过来的，因为怎么 sort，这个字母一定在 3 前面，所以就不行，
   3. 记当前元素在t中的索引为a，当前元素在s中的索引为b，b要排序到达a的位置，b如果要往前排，前面的元素必然不能大于b 所对应的元素，否则造成阻挡，同理如果要往后排，后面的元素必然不能大于b所对应的元素，否则造成阻挡。
   4. 如果a < b, 那么确保s中\[a , b）区间所有索引的元素都要大于b索引的该元素。举例 s = 12345， t = 12435， 假设a（= 2）对应的元素为3，b(= 4), 那么在s中 3 < 4, 没办法反转进行排序。
      如果a > b, 那么确保（b, a]中索引对应的元素均要小于a索引对应的元素。  
   5. 算法：
      如果我们只是单纯对t进行遍历，我们每次都需要查找该元素在s中的对应位置。
      所以，我们使用一个队列数组，数组大小为10， 表示1 - 9的元素，他们对应的索引，因为1-9的元素可能有重复元素，所以，用队列去存储。

   ##### 代码： 

   ```java
   class Solution {
       public boolean isTransformable(String s, String t) {
           int n = s.length();
           Queue<Integer>[] pos = new Queue[10];
           for (int i = 0; i < 10; ++i) {
               pos[i] = new LinkedList<Integer>();
           }
           for (int i = 0; i < n; ++i) {
               pos[s.charAt(i) - '0'].offer(i);
           }
           for (int i = 0; i < n; ++i) {
               int digit = t.charAt(i) - '0';
               if (pos[digit].isEmpty()) {
                   return false;
               }
               for (int j = 0; j < digit; ++j) {
                   //如果比 digit 小的数字靠前面，那么肯定就不能转换了
                   if (!pos[j].isEmpty() && pos[j].peek() < pos[digit].peek()) {
                       return false;
                   }
               }
               pos[digit].poll();
           }
           return true;
       }
   }
   
   作者：LeetCode-Solution
   链接：https://leetcode-cn.com/problems/check-if-string-is-transformable-with-substring-sort-operations/solution/jian-cha-zi-fu-chuan-shi-fou-ke-yi-tong-guo-pai-2/
   来源：力扣（LeetCode）
   著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
   ```

   

   ​	
